let worker = null; // –≤–æ—Ä–∫–µ—Ä (–∂–∏–≤/–º—ë—Ä—Ç–≤)
let queue = [];
let dotTimer = null;
let activeJob = null;

const log = document.getElementById('log');
const btn = document.getElementById('start');

btn.addEventListener('click', onStartClick);

function onStartClick() {
    const isNewWorker = !worker;
    if (isNewWorker) createWorker();

    const line = document.createElement('div');
    line.className = 'line';

    if (!activeJob) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ - –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë —Å—Ä–∞–∑—É!
        activeJob = { line, state: 'working' };
        line.innerHTML = `<span class="green">üü¢ –°–æ–∑–¥–∞–Ω</span> ‚Äî Working`;
        log.append(line);
        startDots(activeJob);
        worker.postMessage({ timeout: 3000 });
    } else {
        // –∏–Ω–∞—á–µ –≤ –æ—á–µ—Ä–µ–¥—å
        line.innerHTML = `<span class="wait">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ</span>`;
        log.append(line);
        queue.push({ line, state: 'wait' });
    }
}

// —Å–æ–∑–¥–∞—ë–º –≤–æ—Ä–∫–µ—Ä
function createWorker() {
    worker = new Worker(new URL('./worker.js', import.meta.url), { type: 'module' });
    worker.onerror = (err) => console.error('worker error', err);
    worker.onmessage = (e) => {
        stopDots();
        const { iterations, sum } = e.data;
        activeJob.line.innerHTML = `<span class="green">‚úÖ</span> ${iterations} | ${sum}`;
        activeJob = null;

        if (queue.length) {
            nextTask();
        } else {
            destroyWorker();
        }
    };
}

// –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
function nextTask() {
    if (!queue.length) return;

    activeJob = queue.shift();
    activeJob.state = 'working';

    activeJob.line.innerHTML = `<span class="orange">üü† –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</span> ‚Äî Working`;
    startDots();
    worker.postMessage({ timeout: 3000 });
}

// —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
function destroyWorker() {
    worker.terminate();
    worker = null;

    const endLine = document.createElement('div');
    endLine.className = 'line red';
    endLine.textContent = 'üî¥ –£–Ω–∏—á—Ç–æ–∂–µ–Ω';
    log.append(endLine);
}

function startDots() {
    let dots = 0;
    stopDots();
    dotTimer = setInterval(() => {
        dots = (dots + 1) % 4;
        if (activeJob) activeJob.line.innerHTML = `<span class="orange">üü† –í —Ä–∞–±–æ—Ç–µ</span> ‚Äî Working` + '.'.repeat(dots);
    }, 1000);
}

function stopDots() {
    clearInterval(dotTimer);
    dotTimer = null;
}
